use hidapi::{HidApi, HidDevice};
use std::thread;
use std::time::Duration;
use enigo::{
  Button, Coordinate,
  Direction::{Click, Press, Release},
  Enigo, Key, Keyboard, Mouse, Settings,
};


fn sleep(duration: u64) {
  thread::sleep(Duration::from_millis(duration));
}



const BLANK_IMAGE: [u32; 727] = [
  0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
  0x00, 0xff, 0xdb, 0x00, 0x43, 0x00, 0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08, 0x07, 0x07, 0x07, 0x09, 0x09, 0x08,
  0x0a, 0x0c, 0x14, 0x0d, 0x0c, 0x0b, 0x0b, 0x0c, 0x19, 0x12, 0x13, 0x0f, 0x14, 0x1d, 0x1a, 0x1f, 0x1e, 0x1d, 0x1a,
  0x1c, 0x1c, 0x20, 0x24, 0x2e, 0x27, 0x20, 0x22, 0x2c, 0x23, 0x1c, 0x1c, 0x28, 0x37, 0x29, 0x2c, 0x30, 0x31, 0x34,
  0x34, 0x34, 0x1f, 0x27, 0x39, 0x3d, 0x38, 0x32, 0x3c, 0x2e, 0x33, 0x34, 0x32, 0xff, 0xdb, 0x00, 0x43, 0x01, 0x09,
  0x09, 0x09, 0x0c, 0x0b, 0x0c, 0x18, 0x0d, 0x0d, 0x18, 0x32, 0x21, 0x1c, 0x21, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32,
  0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32,
  0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32,
  0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0xff, 0xc0, 0x00, 0x11, 0x08, 0x00, 0x48, 0x00, 0x48, 0x03, 0x01, 0x22, 0x00,
  0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xff, 0xc4, 0x00, 0x1f, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
  0x0b, 0xff, 0xc4, 0x00, 0xb5, 0x10, 0x00, 0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05, 0x05, 0x04, 0x04, 0x00,
  0x00, 0x01, 0x7d, 0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07,
  0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0, 0x24, 0x33, 0x62,
  0x72, 0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x34, 0x35, 0x36, 0x37,
  0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a,
  0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85,
  0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6,
  0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
  0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,
  0xe8, 0xe9, 0xea, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xff, 0xc4, 0x00, 0x1f, 0x01, 0x00,
  0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03,
  0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0xff, 0xc4, 0x00, 0xb5, 0x11, 0x00, 0x02, 0x01, 0x02, 0x04, 0x04,
  0x03, 0x04, 0x07, 0x05, 0x04, 0x04, 0x00, 0x01, 0x02, 0x77, 0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31,
  0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71, 0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09,
  0x23, 0x33, 0x52, 0xf0, 0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a,
  0x26, 0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a,
  0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x73, 0x74, 0x75,
  0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96,
  0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,
  0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,
  0xd9, 0xda, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9,
  0xfa, 0xff, 0xda, 0x00, 0x0c, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3f, 0x00, 0xf9, 0xfe, 0x8a, 0x28,
  0xa0, 0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a,
  0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0, 0x02,
  0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0,
  0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28,
  0xa0, 0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a,
  0x28, 0xa0, 0x0f, 0xff, 0xd9
];

fn get_device(
  vendor_id: u16,
  product_id: u16,
  // usage: u16,
  // usage_page: u16,
) -> Option<HidDevice> {
  let api = HidApi::new().expect("Failed to create HID API");
  for dev in api.device_list() {
    if dev.vendor_id() == vendor_id
      && dev.product_id() == product_id
      // && dev.usage() == usage
      // && dev.usage_page() == usage_page
    {
      if let Ok(device) = dev.open_device(&api) {
        return Some(device);
      }
    }
  }
  eprintln!("Device not found");
  return None;
}
fn extract_string(data: &[u8]) -> String {
  // Convert the byte slice to a String, replacing invalid characters with a placeholder
  let string = String::from_utf8_lossy(data);

  // Find the position of the first null byte, if any
  let null_pos = string.find('\0').unwrap_or_else(|| string.len());

  // Take the part of the string up to the first null byte and trim trailing whitespace
  string[..null_pos].trim_end().to_string()
}


fn get_firmware_info(device: &HidDevice) {
    let mut buf = [0u8; 32];
    buf[0] = 0x05;
    if let Ok(size) = device.get_feature_report(&mut buf) {
      println!("Size: {:?}", &size);
      println!("Buffer: {:?}", extract_string(&buf[6..size]));
    }
}

fn get_serial_nr(device: &HidDevice) {
  // def get_serial_number(self):
  //       serial = self.device.read_feature(0x06, 32)
  //       return self._extract_string(serial[2:])
    let mut buf = [0u8; 32];
    buf[0] = 0x06;
    if let Ok(size) = device.get_feature_report(&mut buf) {
      println!("Size: {:?}", &size);
      println!("Buffer: {:?}", extract_string(&buf[2..size]));
    }
}

fn get_brightness(device: &HidDevice) {
  let mut buf = [0u8; 32];
  buf[0] = 0x08;
  if let Ok(size) = device.get_feature_report(&mut buf) {
    println!("Size: {:?}", &size);
    println!("Buffer: {:?}", &buf);
  }
}

fn set_brightness(device: &HidDevice, percentage: usize) {
  let mut buf = [0u8; 32];
  buf[0] = 0x03;
  buf[1] = 0x08;
  buf[2] = percentage as u8;
  if let Ok(size) = device.send_feature_report(&mut buf) {
    println!("Size: {:?}", &size);
    println!("Buffer: {:?}", &buf);
  }
}

fn get_pressed_button(enigo: &mut Enigo, buf: &[u8]) {
  println!("buf: {:?}", buf);
  if let Some(index) = buf.iter().position(|&x| x == 1) {
    if let Some(key) = char::from_u32(index as u32) {
        println!("key: {}", index);
        enigo.key(Key::Unicode('v'), Click);
    }
  }
}


fn read_states(enigo: &mut Enigo, device: &HidDevice) {
  let mut buf = [0u8; 32];
  buf[0] = 19;
  if let Ok(size) = device.read(&mut buf) {
    //println!("Size: {:?}", size);
    //println!("Buffer: {:?}", &buf);
    get_pressed_button(enigo, &buf[4..19]);
  }
}

fn main() {
  let mut enigo = Enigo::new(&Settings::default()).unwrap();
  let api = HidApi::new().expect("Failed to create HID API");
  for dev in api.device_list() {
    if let Ok(device) = dev.open_device(&api) {
      if (dev.vendor_id() != 0x0fd9) || (dev.product_id() != 0x0080) {
        continue;
      }
      if (dev.usage() != 0x0001) || (dev.usage_page() != 0x000c) {
        continue;
      }
      println!("Manufacturer: {:?}", device.get_manufacturer_string());
      println!("Product: {:?}", device.get_product_string());
      println!("Serial Number: {:?}", device.get_serial_number_string());
      get_firmware_info(&device);
      get_serial_nr(&device);
      set_brightness(&device, 30);
      get_brightness(&device);
      loop {
        read_states(&mut enigo, &device);
        sleep(1);
      }
    }
  }
}






